{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","className","s","dialog","active","id","name","Message","message","maxLength30","maxLengthCreator","minLength2","minLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","compose","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,oHCQxIC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAMhC,OAAOC,YAAQN,EAARM,EALmB,SAACC,GAA8B,IAChDL,EAAwBK,EAAxBL,OAAWM,EADoC,YACvBD,EADuB,YAEpD,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,6FCT7BC,EAAa,SAACH,GACvB,OACI,qBAAKI,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACI,cAAC,IAAD,CAASL,GAAI,YAAcF,EAAMQ,GAAjC,SAAsCR,EAAMS,UCL3CC,EAAU,SAACV,GACpB,OACI,qBAAKI,UAAWC,IAAEM,QAAlB,SAA4BX,EAAMW,W,iCCGpCC,EAAcC,YAAiB,KAC/BC,EAAaC,YAAiB,GAoB9BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAlBsC,SAACjB,GAC/D,OACI,uBAAMmB,SAAUnB,EAAMoB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CACIC,UAAWC,IACXd,KAAK,iBACLe,YAAY,qBACZC,SAAU,CAACC,IAAUd,EAAaE,OAG1C,8BACI,kD,yBCODa,sBACX5B,aAhBoB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,gBAIA,SAACC,GACxB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAcD,SAQ/BlC,IAFW8B,EDCQ,SAAC3B,GACpB,IAAMiC,EAAkBjC,EAAM4B,YAAYM,QAAQC,KAAI,SAAAC,GAAC,OACnD,cAAC,EAAD,CAEI5B,GAAI4B,EAAE5B,GACNC,KAAM2B,EAAE3B,MAFH2B,EAAE5B,OAIT6B,EAAmBrC,EAAM4B,YAAYU,SAASH,KAAI,SAAAI,GAAC,OACrD,cAAC,EAAD,CAEI5B,QAAS4B,EAAE5B,SADN4B,EAAE/B,OAQf,OACI,sBAAKJ,UAAWC,IAAE6B,QAAlB,UACI,qBAAK9B,UAAWC,IAAEmC,aAAlB,SACKP,IAEL,qBAAK7B,UAAWC,IAAEiC,SAAlB,SACKD,IAEL,cAACrB,EAAD,CAAqBG,SAZP,SAACsB,GACnBzC,EAAM8B,YAAYW,EAAOV","file":"static/js/5.58d61fc5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React, {ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../redux/store\";\n\ntype MapStatePropsType = {\n    isAuth: boolean,\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: MapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n    return connect(mapStateToProps)(RedirectComponent)\n}","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\nimport s from './../Dialogs.module.css'\n\ntype PropsType = {\n    id: string\n    name: string\n}\n\nexport const DialogItem = (props: PropsType) => {\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport s from './../Dialogs.module.css'\n\ntype PropsType = {\n    message: string\n}\n\nexport const Message = (props: PropsType) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}","import React from \"react\";\nimport s from './Dialogs.module.css'\nimport {DialogItem} from \"./DialogItem/DialogItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\n\ntype FormDataType = {\n    newMessageBody: string\n}\nconst maxLength30 = maxLengthCreator(300)\nconst minLength2 = minLengthCreator(2)\n\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field\n                    component={TextArea}\n                    name='newMessageBody'\n                    placeholder='Enter Your Message'\n                    validate={[required, maxLength30, minLength2]}\n                />\n            </div>\n            <div>\n                <button>send</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    const dialogsElements = props.dialogsPage.dialogs.map(d =>\n        <DialogItem\n            key={d.id}\n            id={d.id}\n            name={d.name}\n        />)\n    const messagesElements = props.dialogsPage.messages.map(m =>\n        <Message\n            key={m.id}\n            message={m.message}\n        />)\n\n    const addNewMessage = (values: FormDataType) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                {messagesElements}\n            </div>\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\n        </div>\n    )\n}\n\n","import {InitialStateType, sendMessageAC} from \"../../redux/dialogs-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport React from \"react\";\n\n\ntype MapStatePropsType = {\n    dialogsPage: InitialStateType\n}\n\ntype MapDispatchPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\n\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogsPage: state.dialogsPage,\n\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageAC(newMessageBody))\n        },\n    }\n}\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}